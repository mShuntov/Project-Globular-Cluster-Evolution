%pylab
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.animation as animation
from numpy import random


master_data = loadtxt('master_data_5.dat')

age = master_data[:,0]
sizerows = size(age)
sizecolumns = size(master_data[0,:])
sizecolumns_2 = int((sizecolumns-1)/2)
print('sizecolumns_2:', sizecolumns_2)


# we run the imf distribution code to get the imf distribution that is the number of stars with
# certain mass that will be used as the size
%run imf_distr.ipy


# We reset the main parameters of the plot
def update_plot(i, color, size, elev, azim, dist, scat):
    global pause
    # Set colors...
    scat.set_array(color[i])
    # Set sizes...
    scat.set_sizes(size[i])
    # Set elevation annd azimuth...
    ax.view_init(elev=elev[i], azim=azim[i])
    # Set distance...
    ax.dist=dist[i]

    return scat,


#import IPython; IPython.embed()
# How many frame?
#numframes = 50
# How many points?
#numpoints = 2000
numpoints = totno_stars
numframes = size(age)

# We initialize the position, color and size of the points (stars)Initialization the position (x, y, z), the color (c) and the size (s) of the points
mu, sigma = 0, 0.3 # mean and standard deviation
x = np.random.normal(mu, sigma, numpoints)
y = np.random.normal(mu, sigma, numpoints)
z = np.random.normal(mu, sigma, numpoints)

c = color_data[0,:]
s = size_data[0,:]
#c[:] = v[:numpoints]
#c = np.random.random((1, numpoints))
#s = np.random.random((1, numpoints))


# Definition of the data for the new values for each new plot
# for the size we enter the imf:
# so for the size, we have one value that is being given to the star
# and one value for each frame for that stars that when the frames go
# the value changes and the size changes with frames.

# so in our case, we use the imf to define the mass distribution of stars
# and we also enter (under numframes) how the size of the star changes with time.


#size_data = 200*np.random.random((numframes, numpoints))
#size_data = 100 * v[:numpoints]
#sizframes = np.linspace(0, 100, numframes)
#size_data = np.random.random((numframes, numpoints))
#color_data = np.random.random((numframes, numpoints))


size_data = 1000 * size_data

#color_data = np.random.random((numframes, numpoints))

#elev_data = np.linspace(0, 360, numframes)
#azim_data = np.linspace(0, 360, numframes)
#dist_data = np.linspace(20, 1, numframes)
elev_data = np.linspace(0, 3600, numframes)
azim_data = np.linspace(0, 2600, numframes)
dist_data = np.linspace(10, 1, numframes)



fig = plt.figure()
ax = Axes3D(fig,  axisbg='black')
#ax = Axes3D(fig)

# We do not want the axis
ax.set_axis_off()

# This is where we plot the cluster
scat = ax.scatter(x, y, z, c=c, s=s, alpha=1, edgecolors='none', cmap = 'jet_r')
xmin = np.min(x)
xmax = np.max(x)
ax.set_xlim(xmin,xmax)
ax.set_ylim(xmin,xmax)
ax.set_zlim(xmin,xmax)

# This is the animation. In fargs, we provide the data for each new plot.
#time_text = ax.text(0.05, 0.95,'',horizontalalignment='left',verticalalignment='top', transform=ax.transAxes)
#fig.canvas.mpl_connect('button_press_event', onClick)
ani = animation.FuncAnimation(fig, update_plot, frames=range(numframes),
                                  fargs=(color_data, size_data, 
                                  elev_data, azim_data, dist_data,
                                  scat), blit=False, interval=1, repeat=True)

plt.show()
#ani.save('G_clu_evolution.mp4', fps=70, extra_args=['-vcodec', 'libx264'])
